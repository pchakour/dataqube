{"common":{"plugin":{"badge":"unknown","description":null,"params":[{"name":"tag","type":"string","options":{"multi":true,"default":null},"description":"List of tag to add if the plugin is well executed"},{"name":"when","type":"string","options":{"default":null},"description":"Ruby predicate to indicate when execute this plugin"}]},"input":{"badge":"unknown","description":"Read data from specific source using one of the following plugins:","params":[]},"output":{"badge":"unknown","description":"Send your data to a specific destination using one of the following plugins:","params":[]},"transformer":{"badge":"unknown","description":"Transform your data using one of the following plugins:","params":[]},"extractor":{"badge":"unknown","description":"Extract fields from your data using one of the following plugins:","params":[]},"assertion":{"badge":"unknown","description":"Check and validate your data using one of the following plugins:","params":[{"name":"message","type":"string","options":{"default":null},"description":"Message to store when assert event"},{"name":"severity","type":["fatal","major","minor","info"],"options":{"default":"info"},"description":"Severity of the assertion"},{"name":"expected","type":["failure","success"],"options":{"default":"success"},"description":"Indicate if you expect the check failed or succeed"}]}},"input":{"tail":{"badge":"unknown","description":"Tail files from a specific path","params":[{"name":"path","type":"string","options":null,"description":"Path of fields to read. Wildcards are allowed to target multiple files"},{"name":"format","type":["auto","raw","json"],"options":{"default":"auto"},"description":"Decoding format of files. 'auto' use extension files to determine the right format"}],"license":"community"}},"output":{"elasticsearch":{"badge":"unknown","description":"Output data to an Elasticsearch database","params":[{"name":"scheme","type":["http","https"],"options":{"default":"http"},"description":"Connection protocol to use, specify https if your Elasticsearch endpoint supports SSL"},{"name":"host","type":"string","options":{"default":"localhost"},"description":"The hostname of your Elasticsearch node"},{"name":"port","type":"integer","options":{"default":9200},"description":"The port number of your Elasticsearch node"},{"name":"index","type":"string","options":{"default":"dataqube"},"description":"The index name to write events to"},{"name":"user","type":"string","options":{"default":null},"description":"You can specify user for HTTP Basic authentication"},{"name":"password","type":"string","options":{"default":null},"description":"You can specify password for HTTP Basic authentication"},{"name":"cacert","type":"string","options":{"default":null},"description":"Need to verify Elasticsearch's certificate? You can use the following parameter to specify a CA"}],"license":"community"},"stdout":{"badge":"unknown","description":"Output data to stdout","params":[],"license":"community"}},"transformer":{"add_field":{"badge":"unknown","description":"\n  This plugin allow you to add a new field in your record\n  \n  \n<CodeGroup>\n  <CodeGroupItem title='CONFIG'>\n\n```yaml{3-5}\n- tag: EXAMPLE_ADD_FIELD\n  transform:\n    - type: add_field\n      name: new_field_message\n      value: \"Message: %{message}\"\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n  ","params":[{"name":"name","type":"string","options":null,"description":"New field name"},{"name":"value","type":"string","options":{"field_interpretation":true},"description":"New value field"}],"license":"community"},"date":{"badge":"unknown","description":"Convert a string as a Date object","params":[{"name":"source","type":"string","options":null,"description":"Source to get date string"},{"name":"target","type":"string","options":{"default":null},"description":"Target to write the date object. By default, the source will be overwrite with the date object"},{"name":"format","type":"string","options":{"default":null},"description":"Date format"}],"license":"community"},"join":{"badge":"unknown","description":"Join events","params":[{"name":"by","type":"string","options":null,"description":"Key shared between events to join. This field is a ruby instruction."},{"name":"from","type":{"rule_tag":{"type":"string","desc":"Check if an event is tagged by the rule_tag"}},"options":null,"description":"Determine the beginning of a join section"},{"name":"until","type":{"rule_tag":{"type":"string","desc":"Check if an event is tagged by the rule_tag"}},"options":null,"description":"Determine the end of a join section"},{"name":"using","type":{"when":{"config_param":{"rule_tag":{"type":"string","desc":"Check if an event is tagged by the rule_tag"},"code":{"type":"string","desc":"Ruby code to execute when conditions are met"}}}},"options":{"multi":true},"description":"What to do to join events"}],"license":"community"},"list":{"badge":"unknown","description":"Parse a serialized list","params":[{"name":"source","type":"string","options":{"default":"message"},"description":"Source field to parse"},{"name":"target","type":"string","options":{"default":null},"description":"\n    Target field to store parsed data. By default, the parsed data will be merged with the target field.\n    If no target is provided, the source field will be used.\n  "},{"name":"overwrite","type":"boolean","options":{"default":false},"description":"Change the default behavior that merge parsed data with target. True will replace the target field value by the parsed data"}],"license":"community"},"remove_fields":{"badge":"unknown","description":"Remove fields from an event","params":[{"name":"source","type":"string","options":{"multi":true},"description":"Field to remove. Accept an array to delete several fields at once"}],"license":"community"},"ruby":{"badge":"unknown","description":"Execute ruby code","params":[{"name":"once","type":"string","options":{"default":null},"description":"Code executed once at the startup. Could be useful to initialize some variables."},{"name":"each","type":"string","options":{"default":""},"description":"Code executed for each event"}],"license":"community"},"split":{"badge":"unknown","description":"\n  Split an event in several events based on the specified field\n\n  ::: warning\n    Limitation only one by tag and at the end of the transform section\n  :::\n  ","params":[{"name":"source","type":"string","options":{"multi":true},"description":"Field to split in several events. You can specify an array"}],"license":"community"},"uuid":{"badge":"unknown","description":"Generate a unique id in the specified target","params":[{"name":"target","type":"string","options":null,"description":"Field in which stored the unique id"}],"license":"community"}},"extractor":{"grok":{"badge":"unknown","description":"Extract informations using grok patterns. This plugin assert an error if the extraction process failed depending on the 'expected' parameter","params":[{"name":"source","type":"string","options":{"default":"message"},"description":"Source field on which apply the grok pattern"},{"name":"target","type":"string","options":{"default":"message"},"description":"EXPLAIN THIS PARAM"},{"name":"pattern","type":"string","options":{"multi":true},"description":"Pattern grok to use. You can specify several patterns to check"},{"name":"severity","type":["info","major","minor","fatal"],"options":{"default":"info"},"description":"Severity error"},{"name":"expected","type":["failure","success"],"options":{"default":"success"},"description":"Indicate if you expect the check failed or succeed"}],"license":"community"},"kv":{"badge":"unknown","description":"Extract data using key value pattern","params":[{"name":"source","type":"string","options":null,"description":"Source field to use for the extraction"}],"license":"community"}},"assertion":{"contains":{"badge":"unknown","description":"Check if an array contains a specific value","params":[{"name":"source","type":"string","options":null,"description":"Source field to check. The field must be an array."},{"name":"value","type":"any","options":null,"description":"Value to find in the array"}],"license":"community"},"empty":{"badge":"unknown","description":"Check if a field value is empty","params":[{"name":"source","type":"string","options":{"multi":true},"description":"Source field to check"}],"license":"community"},"eq":{"badge":"unknown","description":"Check if a field value is equal to a specify value","params":[{"name":"source","type":"string","options":{"multi":true},"description":"Source field to check"},{"name":"value","type":"any","options":null,"description":"Value to compare"}],"license":"community"},"size":{"badge":"unknown","description":"Check if the size of an array is include between a min and a max. Min and max are included.","params":[{"name":"source","type":"string","options":null,"description":"Source field to check. The field must be an array."},{"name":"min","type":"integer","options":{"default":0},"description":"Min value"},{"name":"max","type":"integer","options":{"default":0},"description":"Max value"}],"license":"community"}}}